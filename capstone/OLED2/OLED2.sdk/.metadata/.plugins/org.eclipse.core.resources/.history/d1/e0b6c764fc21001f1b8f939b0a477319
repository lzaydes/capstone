/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "sleep.h"
#include "xil_printf.h"

#include "xgpio.h"
#include "xuartlite.h"
#include "PmodGpio.h"

// Pin definitions
//JB
#define DATA_PINS 0x3CF // pins 1-4, 7-10
#define VCC_PINS_JB 0x820 // pins 6 and 12
#define GND_PINS_JB 0x410 // pins 5 and 11

//JC
#define VCI_PIN 0x1 // pin 1
#define RESET_PIN 0x2 // pin 2
#define VCC_BAT_PIN 0x4 // pin 3
#define DC_PIN 0x40 // pin 7
#define REN_PIN 0x80 // pin 8
#define WREN_PIN 0x100 // pin 9
#define VDD_LOGIC_PIN 0x200 // pin 10
#define VCC_PINS_JC 0x820 // pins 6 and 12
#define GND_PINS_JC 0x410 // pins 5 and 11

// GPIO for monitoring ports jc and jb
PmodGPIO jb, jc;

void init();
void gpio_init();
void oled_init();
void send_command(uint8_t cmd);

int main()
{
	init();

    return 0;
}

void init()
{
	gpio_init();
	oled_init();

}

void gpio_init()
{
	 GPIO_begin(&jb, XPAR_PMODGPIO_0_AXI_LITE_GPIO_BASEADDR, DATA_PINS | VCC_PINS_JB | GND_PINS_JB);
	 GPIO_begin(&jc, XPAR_PMODGPIO_1_AXI_LITE_GPIO_BASEADDR, VCI_PIN | RESET_PIN | VCC_BAT_PIN | DC_PIN | REN_PIN | WREN_PIN | VDD_LOGIC_PIN | VCC_PINS_JC | GND_PINS_JC);

	 // Set VCC and GND pins to output high
	GPIO_setPin(&jb, VCC_PINS_JB, 1);
	GPIO_setPin(&jc, VCC_PINS_JC, 1);

	// Set GND pins to output low
	GPIO_setPin(&jb, ~GND_PINS_JB, 0);
	GPIO_setPin(&jc, ~GND_PINS_JC, 0);
}

void oled_init()
{
	/* Display on sequence
	 *
	 * 1. Apply power to VCI
	 * 2. Wait 300ms
	 * 3. Send Display Off command (0xAE)
	 * 4. Set DC Pin to select mode
	 * 5. Clear screen
	 * 6. Apply power to VCC
	 * 7. Delay 100ms
	 * 8. Send Display On command (0xAF)
	 *
	 */

	// Apply power to VCI
	GPIO_setPin(&jc, 1, 1);

	usleep(400000);

	// Display Off
	send_command(0xAE);

	GPIO_setPin(&jc, 7, 0);

	// Normal Display Mode
	send_command(0xA6);

	// Apply power to VCC
	GPIO_setPin(&jb, 6, 1);
	GPIO_setPin(&jb, 12, 1);
	GPIO_setPin(&jc, 6, 1);
	GPIO_setPin(&jb, 12, 1);

	usleep(150000);

	send_command(0xAF);
}

void send_command(uint8_t cmd)
{
    // Set DC pin to low for command mode
    GPIO_setPin(&jc, 7, 0);

    // Send command via DATA_PINS on JB
    GPIO_setPins(&jb, cmd);

    // Set DC pin back to high for data mode
    GPIO_setPin(&jc, 7, 1);
}
